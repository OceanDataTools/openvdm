#!/usr/bin/env python3
"""
FILE:  build_remote_directory.py

USAGE:  buildRemoteDirectory.py [-h] [-s] [-t directory] collection_system

REQUIRED ARGUMENTS:
    collection_system  name of OpenVDM-defined collection system to process

OPTIONAL ARGUMENTS:
    -h, --help               show this help message and exit
    -v[+]                    increase verbosity of script (DEFAULT: Warning)
    -s, --create_source      create the source directory
    -t, --template directory the directory structure to create on the remote
                             server
    -c, --collection_system  Create the remote directory/file just for the
                             specified collection system'

DESCRIPTION:
    This script is designed to be called from the postSetupNewCruise hook to
    create directories and files on remote workstations when a new cruise is
    setup.

    This script will only create directories on remote machines if the
    corresponding collection system transfer is active when the cruise is
    created.

    The template directory structure must include top-level subdirectories
    whose names match the short-names for the collection system transfers.

    Any files or directories below the top-level subdirectory will be copied
    to the remote workstation using the connection details provided in the
    corresponding collection system transfer.  The current cruiseID can be
    used in a remote directory or file name by adding "{cruiseID}" to the
    directory/file in the template directory.

    i.e.
    /template_directory
        /XBT
            /{cruiseID}
                /raw_data
                /{cruiseID}_XBT_log.csv

    For the example template directory struction and a current cruiseID of
    RV1001, this script will create the following directory structure within
    the source directory defined for the XBT workstation.

    <source dir>/RV1001
    <source dir>/RV1001/raw_data
    <source dir>/RV1001/RV1001_XBT_log.csv

    BUGS:
   NOTES:
  AUTHOR:  Webb Pinner
 VERSION:  2.9
 CREATED:  2020-11-19
REVISION:  2022-07-24
"""

import os
import sys
import json
import shutil
import pathlib
import logging
import argparse
import subprocess

from os.path import dirname, realpath
sys.path.append(dirname(dirname(realpath(__file__))))

from server.lib.set_owner_group_permissions import set_owner_group_permissions
from server.lib.openvdm import OpenVDM

TEMPLATE_DIRECTORY = '/opt/openvdm/template_directory'

def make_system_call(command):
    """
    function to make any system calls
    """

    logging.debug("Command: %s", ' '.join(command))
    proc = subprocess.Popen(command, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
    out, err = proc.communicate()

    if len(out) > 0:
        logging.debug("stdout:\n%s",out)

    if len(err) > 0:
        logging.error("stderr:\n%s",err)

def make_local_directory(directory, create_source_dir=False):
    """
    Function to make a local directory
    """
    logging.debug("Create directory: %s, Create Source: %s", directory, "Yes" if create_source_dir else "No")
    pathlib.Path(directory).mkdir(mode=755, parents=create_source_dir, exist_ok=True)

# -------------------------------------------------------------------------------------
# Required python code for running the script as a stand-alone utility
# -------------------------------------------------------------------------------------
if __name__ == "__main__":

    # Define the command-line structure
    parser = argparse.ArgumentParser(description='build remote directory structure based on template')
    parser.add_argument('-v', '--verbosity', dest='verbosity', action='count', default=0,
                        help='Increase output verbosity')
    parser.add_argument('-s', '--create_source', action='store_true',
                        help='Create the source directory')
    parser.add_argument('-l', '--lowering', action='store_true',
                        help='Create the remote directories/files for the lowering collection system transfers.')
    parser.add_argument('-t', '--template', dest='template_directory', metavar='template_directory',
                        help='The directory containing the directories/files to create on the remote system')
    parser.add_argument('-c', '--collection_system', action='append', dest='collection_system', metavar='collection_system',
                        help='Create the remote directory/file just for the specified collection system')

    parsed_args = parser.parse_args()

    ############################
    # Set up logging before we do any other argument parsing (so that we
    # can log problems with argument parsing).

    LOGGING_FORMAT = '%(asctime)-15s %(levelname)s - %(message)s'
    logging.basicConfig(format=LOGGING_FORMAT)

    LOG_LEVELS = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}
    parsed_args.verbosity = min(parsed_args.verbosity, max(LOG_LEVELS))
    logging.getLogger().setLevel(LOG_LEVELS[parsed_args.verbosity])

    template_directory = parsed_args.template_directory or TEMPLATE_DIRECTORY

    # Verify the template directory exists
    if not os.path.isdir(template_directory):
        logging.error("Template directory: %s, does not exist", template_directory)
        sys.exit(1)

    # build an OpenVDM object
    openvdm = OpenVDM()

    # Retrieve the shipboard data warehouse configuration
    warehouse_config = openvdm.get_shipboard_data_warehouse_config()

    # Retrieve the current cruiseID
    cruise_id = openvdm.get_cruise_id()

    # Retrieve the current loweringID
    lowering_id = openvdm.get_lowering_id()

    if parsed_args.lowering is True and lowering_id is None:
        logging.error("No lowering ID has been defined within OpenVDM for the current cruise.  Cannot cruise remote directories for lowering-focused collection system transfers.")
        sys.exit(1)

    collection_systems = []

    # Retrieve the information for the collection system defined in the command-line argument
    if parsed_args.collection_system:

        for cs in parsed_args.collection_system:

            collection_system = openvdm.get_collection_system_transfer_by_name(cs)
            if not collection_system:
                logging.error("Collection System: %s not found in OpenVDM configuration.", cs)
                sys.exit(1)

            if collection_system['transferType'] not in ["1","3", "4"]:
                logging.info("Collection System: %s is not a Local Directory, SSH or Samba Server Transfer!", cs)
                sys.exit(1)

            if collection_system['cruiseOrLowering'] == "1" and lowering_id is None:
                logging.error("No lowering ID has been defined within OpenVDM for the current cruise.  Cannot cruise remote directories for lowering-focused collection system transfers.")
                sys.exit(1)

            collection_systems.append(collection_system)
    else:
        collection_systems = openvdm.get_active_collection_system_transfers(lowering=False) if parsed_args.lowering is not True else openvdm.get_active_collection_system_transfers(cruise=False)

    for collection_system in collection_systems:

        logging.debug(json.dumps(collection_system, indent=2))
        if collection_system['transferType'] not in ["1","3", "4"]:
            logging.info("Skipping Collection System: %s. Transfer type is not Local Directory SSH or Samba Server.", collection_system['name'])
            continue

        if not os.path.isdir(os.path.join(template_directory, collection_system['name'])):
            logging.info("Skipping Collection System: %s. Corresponding template structure does not exist.", collection_system['name'])
            continue

        logging.info("Collection System: %s", collection_system['name'])
        source_dir = collection_system['sourceDir'].replace("{cruiseID}", cruise_id)
        if lowering_id is not None:
            source_dir = source_dir.replace("{loweringID}", lowering_id)

        if parsed_args.create_source is True:
            logging.info("  - Creating source directory: %s", source_dir)
            if collection_system['transferType'] == "1":
                make_local_directory(source_dir, True)
                set_owner_group_permissions(warehouse_config['shipboardDataWarehouseUsername'], os.path.join(source_dir))

            if collection_system['transferType'] == "3":
                make_system_call(["smbclient", collection_system['smbServer'], "-W", collection_system['smbDomain'], "-U", collection_system['smbUser'] + "%" + collection_system['smbPass'], "-m", "SMB2", "-c 'mkdir \"" + source_dir + "\"'"])

            if collection_system['transferType'] == "4":
                # ssh remote-host-ip '. ~/your_profile; test -d your_directory || mkdir your_directory'
                make_system_call(['sshpass', '-p', collection_system['sshPass'], "ssh", collection_system['sshUser'] + '@' + collection_system['sshServer'] + ';', "test", "-d", "mkdir \"" + source_dir + "\"", "||", "mkdir \"" + source_dir + "\""])

        for root, dirs, files in os.walk(os.path.join(template_directory, collection_system['name'])):
            root = root.replace(template_directory, '').lstrip('/')
            for name in dirs:
                name = name.replace("{cruiseID}", cruise_id)
                if lowering_id is not None:
                    name = name.replace("{loweringID}", lowering_id)

                logging.info("  - Creating directory: %s", os.path.join(source_dir, root, name))
                if collection_system['transferType'] == "1":
                    logging.info("make_local_dir")
                    make_local_directory(os.path.join(source_dir, root, name), parsed_args.create_source)

                if collection_system['transferType'] == "3":
                    make_system_call(["smbclient", collection_system['smbServer'], "-W", collection_system['smbDomain'], "-U", collection_system['smbUser'] + '%' + collection_system['smbPass'], "-m", "SMB2", "-c 'mkdir \"" + os.path.join(source_dir, root, name) + "\"'"])

                if collection_system['transferType'] == "4":
                    # ssh remote-host-ip '. ~/your_profile; mkdir your_directory'
                    make_system_call(['sshpass', '-p', collection_system['sshPass'], "ssh", collection_system['sshUser'] + '@' + collection_system['sshServer'] + ';', "mkdir \"" + os.path.join(source_dir, root, name) + "\""])

            for name in files:
                new_name = name.replace("{cruiseID}", cruise_id)
                if lowering_id is not None:
                    new_name = new_name.replace("{loweringID}", lowering_id)

                logging.info("  - Creating file:      %s", os.path.join(source_dir, root, new_name))
                if collection_system['transferType'] == "1":
                    shutil.copyfile(os.path.join(source_dir, root, name), os.path.join(source_dir, root, new_name))
                    set_owner_group_permissions(warehouse_config['shipboardDataWarehouseUsername'], os.path.join(source_dir, root, new_name))

                if collection_system['transferType'] == "3":
                    make_system_call(["smbclient", collection_system['smbServer'], "-W", collection_system['smbDomain'], "-U", collection_system['smbUser'] + '%' + collection_system['smbPass'], "-m", "SMB2", "-c 'put \"" + os.path.join(source_dir, root, name) + "\";rename \"" + os.path.join(source_dir, root, name) + "\", \"" + os.path.join(source_dir, root, new_name) + "\"'"])

                if collection_system['transferType'] == "4":
                    make_system_call(['sshpass', '-p', collection_system['sshPass'], "scp",  os.path.join(source_dir, root, name), collection_system['sshUser'] + '@' + collection_system['sshServer'] + ':' + os.path.join(source_dir, root, new_name)])

