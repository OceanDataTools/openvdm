#!/usr/bin/env python3
"""
FILE:  build_remote_directory.py

USAGE:  buildRemoteDirectory.py [-h] [-s] [-t directory] collection_system

REQUIRED ARGUMENTS:
    collection_system  name of OpenVDM-defined collection system to process

OPTIONAL ARGUMENTS:
    -h, --help               show this help message and exit
    -v[+]                    increase verbosity of script (DEFAULT: Warning)
    -s, --create_source      create the source directory
    -t, --template directory the directory structure to create on the remote
                             server

DESCRIPTION:
    This script utilizes OpenVDM's hook architecture to create a directory
    structure on a remote workstations based on a directory structure template.
    The directory structure is created automatically at the when a new cruise
    is created within OpenVDM.

    This script is designed to be called from the postSetupNewCruise hook.

    BUGS:
   NOTES:
  AUTHOR:  Webb Pinner
 VERSION:  2.0
 CREATED:  2020-11-19
REVISION:  2022-01-09
"""

import os
import sys
import json
import shutil
import logging
import subprocess

from os.path import dirname, realpath
sys.path.append(dirname(dirname(realpath(__file__))))

from server.lib.set_owner_group_permissions import set_owner_group_permissions
from server.lib.openvdm import OpenVDM

TEMPLATE_DIRECTORY = '/home/sealog/template_directory'

def make_system_call(command):

    logging.debug("Command: %s", ' '.join(command))
    proc = subprocess.Popen(command, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
    out, err = proc.communicate()            

    if len(out) > 0:
        logging.debug("stdout:\n%s",out)
        
    if len(err) > 0:
        logging.error("stderr:\n%s",err)


# -------------------------------------------------------------------------------------
# The main function of the script
# -------------------------------------------------------------------------------------
def main(argv):

    import argparse
       
    # Define the command-line structure
    parser = argparse.ArgumentParser(description='build remote directory structure based on template')
    parser.add_argument('-v', '--verbosity', dest='verbosity',
                        default=0, action='count',
                        help='Increase output verbosity')
    parser.add_argument('-s', '--create_source',  action='store_true', help=' create the source directory')
    parser.add_argument('-t', '--template', dest='template_directory', metavar='template_directory',
                        help='the directory structure to create on the remote server')
    parser.add_argument('-c', '--collection_system', dest='collection_system', metavar='collection_system',
                        help='create the remote directory/file just for the specified collection system')

    parsed_args = parser.parse_args()

    ############################
    # Set up logging before we do any other argument parsing (so that we
    # can log problems with argument parsing).

    LOGGING_FORMAT = '%(asctime)-15s %(levelname)s - %(message)s'
    logging.basicConfig(format=LOGGING_FORMAT)

    LOG_LEVELS = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}
    parsed_args.verbosity = min(parsed_args.verbosity, max(LOG_LEVELS))
    logging.getLogger().setLevel(LOG_LEVELS[parsed_args.verbosity])

    template_directory = parsed_args.template_directory or TEMPLATE_DIRECTORY

    # Verify the template directory exists
    if not os.path.isdir(template_directory):
        logging.error("Template directory: %s, does not exist", template_directory)
        sys.exit(1)

    # build an OpenVDM object
    openVDM = OpenVDM()

    # Retrieve the shipboard data warehouse configuration
    warehouse_config = openVDM.get_shipboard_data_warehouse_config()

    # Retrieve the current cruiseID
    cruiseID = openVDM.get_cruise_id()

    collection_systems = []

    # Retrieve the information for the collection system defined in the command-line argument
    if parsed_args.collection_system:

        collection_system = openVDM.get_collection_system_transfer_by_name(parsed_args.collection_system)
        if not collection_system:
            logging.error("Collection System: %s not found in OpenVDM configuration.", parsed_args.collection_system)
            sys.exit(1)

        if collection_system['transferType'] not in ["1","3"]:
            logging.info("Collection System: %s is not a Local Directory or Samba Server Transfer!", parsed_args.collection_system)
            sys.exit(1)

        collection_systems.append(collection_system)
    else:
        collection_systems = openVDM.get_active_collection_system_transfers(lowering=False)

    for collection_system in collection_systems:

        logging.debug(json.dumps(collection_system, indent=2))
        if collection_system['transferType'] not in ["1","3"]:
            logging.info("Skipping Collection System: %s. Transfer type is not Local Directory or Samba Server.", collection_system['name'])
            continue

        if not os.path.isdir(os.path.join(template_directory, collection_system['name'])):
            logging.info("Skipping Collection System: %s. Corresponding template structure does not exist.", collection_system['name'])
            continue

        source_dir = collection_system['sourceDir'].replace("{cruiseID}", cruiseID)

        if parsed_args.create_source:
            source_dir_parts = os.path.split(source_dir)
            for idx, subDir in enumerate(source_dir_parts, start=1):
                logging.debug("Create directory: %s", os.path.join(*source_dir_parts[:idx]))
                if collection_system['transferType'] == 1:
                    os.mkdir(os.path.join(*source_dir_parts[:idx]), 0o755)
                    set_owner_group_permissions(warehouse_config['shipboardDataWarehouseUsername'], os.path.join(*source_dir_parts[:idx]))

                if collection_system['transferType'] == 3:
                    make_system_call(["smbclient", collection_system['smbServer'], collection_system['smbPass'], "-W", collection_system['smbDomain'], "-U", collection_system['smbUser'], "-m", "SMB2", "-c 'mkdir \"" + os.path.join(*source_dir_parts[:idx]) + "\"'"])

        for root, dirs, files in os.walk(os.path.join(template_directory, collection_system['name'])):
            root = root.replace(template_directory, '').lstrip('/')
            for name in dirs:
                name = name.replace("{cruiseID}", cruiseID)
                logging.debug("Create directory: %s", os.path.join(source_dir, root, name))
                if collection_system['transferType'] == 1:
                    os.mkdir(os.path.join(source_dir, root, name), 0o755)

                if collection_system['transferType'] == 3:
                    make_system_call(["smbclient", collection_system['smbServer'], collection_system['smbPass'], "-W", collection_system['smbDomain'], "-U", collection_system['smbUser'], "-m", "SMB2", "-c 'mkdir \"" + os.path.join(source_dir, root, name) + "\"'"])

            for name in files:
                new_name = name.replace("{cruiseID}", cruiseID)
                logging.debug("Create file:      %s", os.path.join(source_dir, root, new_name))
                if collection_system['transferType'] == 1:
                    shutil.copyfile(os.path.join(source_dir, root, name), os.path.join(sourceDir, root, new_name))
                    set_owner_group_permissions(warehouse_config['shipboardDataWarehouseUsername'], os.path.join(sourceDir, root, new_name))

                if collection_system['transferType'] == 3:
                    make_system_call(["smbclient", collection_system['smbServer'], collection_system['smbPass'], "-W", collection_system['smbDomain'], "-U", collection_system['smbUser'], "-m", "SMB2", "-c 'put \"" + os.path.join(source_dir, root, name) + "\";rename \"" + os.path.join(source_dir, root, name) + "\", \"" + os.path.join(sourceDir, root, new_name) + "\"'"])

if __name__ == "__main__":
    main(sys.argv[1:])

