#!/usr/bin/env python3
"""
FILE:  build_cruise_tracks.py

USAGE:  build_cruise_tracks.py [-h] [-v+] [-c cruiseID] collectionSystem

REQUIRED ARGUMENTS:
    collectionSystem  name of OpenVDM-defined collection system to process

OPTIONAL ARGUMENTS:
    -h, --help        show this help message and exit
    -v[+]             increase verbosity of script (DEFAULT: Warning)
    -c cruiseID       the cruiseID to process

DESCRIPTION:
    Creates geoJSON and kml representations of the shiptrack for the specified cruise
    based on the geoJSON data created as part of the OpenVDM plugins.

    In this example there is an OpenVDM plugin for the OpenRVDAS collection system.
    That plugin created json-formatted dashboardData files for two sensors: CNAV and
    POSMV.  These datasets are defined within the "GPSSources" array.

    Each element within the "GPSSources" array includes the name of the device (used
    in the final filename) and a regex string specifying where the dashboardData
    are located within the top-level directory for OpenRVDAS data within the
    dashboardData directory specified within OpenVDM.  In most cases the dashboardData
    files reside in the exact same directory structure as the raw data files.

    i.e.
        Raw Files:
            /<cruiseID>/OpenRVDAS/NAV/CNAV-GGA_*.Raw
            /<cruiseID>/OpenRVDAS/NAV/POSMV-GGA_*.Raw
        DataDashboard Files:
            /<cruiseID>/OpenVDM/Dashboard_Data/OpenRVDAS/NAV/CNAV-GGA_*.json
            /<cruiseID>/OpenVDM/Dashboard_Data/OpenRVDAS/NAV/POSMV-GGA_*.json
        Trackline Files:
            /<cruiseID>/OpenVDM/Tracklines/<cruiseID>_CNAV_Trackline.json
            /<cruiseID>/OpenVDM/Tracklines/<cruiseID>_CNAV_Trackline.kml
            /<cruiseID>/OpenVDM/Tracklines/<cruiseID>_POSMV_Trackline.json
            /<cruiseID>/OpenVDM/Tracklines/<cruiseID>_POSMV_Trackline.kml

    BUGS:
   NOTES:
  AUTHOR:  Webb Pinner
 VERSION:  2.11
 CREATED:  2016-03-06
REVISION:  2025-04-12
"""

import argparse
import glob
import json
import logging
import os
import sys

from os.path import dirname, realpath
sys.path.append(dirname(dirname(realpath(__file__))))

from server.lib.file_utils import set_owner_group_permissions, output_json_data_to_file
from server.lib.geojson_utils import convert_to_kml, combine_geojson_files
from server.lib.openvdm import OpenVDM

TRACKLINE_EXTRA_DIR_NAME = 'Tracklines'
DASHBOARD_EXTRA_DIR_NAME = 'Dashboard_Data'

AllGPSSources = [
    {
        "CollectionSystem":"OpenRVDAS",
        "GPSSources": [
            {
                "device":"CNAV",
                "regex":"NAV/CNAV-GGA_*.json"
            },
            {
                "device":"POSMV",
                "regex":"NAV/POSMV-GGA_*.json"
            }
        ]
    }
]


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='build cruise tracklines post-dashboard processing')
    parser.add_argument('-v', '--verbosity', dest='verbosity',
                        default=0, action='count',
                        help='Increase output verbosity')
    parser.add_argument('-n','--no_combine', action='store_true', help='do NOT combine the json files')

    group1 = parser.add_mutually_exclusive_group()
    group1.add_argument('-k','--kml_only', action='store_true', help='only create the KML files')
    group1.add_argument('-g','--geojson_only', action='store_true', help='only create the GeoJSON files')

    parser.add_argument('-c', dest='cruiseID', metavar='cruiseID', help='the cruiseID to process')
    parser.add_argument('-o', dest='outputDir', metavar='outputDir', help='the desired output directory')
    parser.add_argument('-u', '--username', metavar='username', help='set the output file(s) ownership to username')
    parser.add_argument('collectionSystem', help='the collection system to search for geoJSON files')

    parsed_args = parser.parse_args()

    ############################
    # Set up logging before we do any other argument parsing (so that we
    # can log problems with argument parsing).

    LOGGING_FORMAT = '%(asctime)-15s %(levelname)s - %(message)s'
    logging.basicConfig(format=LOGGING_FORMAT)

    LOG_LEVELS = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}
    parsed_args.verbosity = min(parsed_args.verbosity, max(LOG_LEVELS))
    logging.getLogger().setLevel(LOG_LEVELS[parsed_args.verbosity])

    # build an OpenVDM object
    openVDM = OpenVDM()

    # Define the cruiseID to use for identifying the position data
    cruiseID = parsed_args.cruiseID or openVDM.get_cruise_id()

    if cruiseID is None:
        logging.error("Unable to find CruiseID")
        sys.exit(1)

    # Retrieve the information for the collection system defined in the command-line argument
    collectionSystem = openVDM.get_collection_system_transfer_by_name(parsed_args.collectionSystem)
    if not collectionSystem:
        logging.error("Collection System: %s not found in OpenVDM configuration.", parsed_args.collectionSystem)
        sys.exit(1)

    # Retrieve the shipboard data warehouse configuration
    shipboardDataWarehouseConfig = openVDM.get_shipboard_data_warehouse_config()

    # Construct the full path to the cruise data directory
    baseDir = shipboardDataWarehouseConfig['shipboardDataWarehouseBaseDir']
    cruiseDir = os.path.join(baseDir, cruiseID)

    # Get the user to save the output file(s) as
    outputUser = parsed_args.username or shipboardDataWarehouseConfig['shipboardDataWarehouseUsername']

    # Verify the cruise data directory exists
    if not os.path.isdir(cruiseDir):
        logging.error("Cruise data directory: %s not found!", cruiseDir)
        sys.exit(1)

    tracklineDir = parsed_args.outputDir or os.path.join(cruiseDir, openVDM.get_extra_directory_by_name(TRACKLINE_EXTRA_DIR_NAME)['destDir'])

    # Verify the trackline directory exists
    if not os.path.isdir(tracklineDir):
        logging.error("Trackline Directory: %s not found", tracklineDir)
        sys.exit(1)

    dashboardDataDirectory = openVDM.get_required_extra_directory_by_name(DASHBOARD_EXTRA_DIR_NAME)['destDir']
    dashboardDataDir = os.path.join(cruiseDir, dashboardDataDirectory)

    # Verify the data dashboard directory exists
    if not os.path.isdir(dashboardDataDir):
        logging.error("Dashboard Data Directory: %s not found", dashboardDataDir)
        sys.exit(1)

    collectionSystemDashboardDataDir = os.path.join(dashboardDataDir, collectionSystem['destDir'])

    # Verify the dashboard data directory for the specified collecion system exists
    if not os.path.isdir(collectionSystemDashboardDataDir):
        logging.error('Dashboard Data Directory for %s: %s not found', collectionSystem['name'], collectionSystemDashboardDataDir)
        sys.exit(1)

    # Loop through the AllGPSSources object
    for GPSSources in AllGPSSources:

        # If the collection system name matches the one in the command-line argrument
        if GPSSources['CollectionSystem'] == parsed_args.collectionSystem:

            #Build a geoJSON and kml cruisetrack for each GGA Device
            for GPSSource in GPSSources['GPSSources']:
                logging.info("Processing %s", GPSSource['device'])

                # Build the list of files coorsponding to the current device based on the regex provided
                files = glob.glob(collectionSystemDashboardDataDir.rstrip('/') + '/' + GPSSource['regex'])

                if len(files) == 0:
                    logging.warning('No files found for GPS Source: %s', GPSSource['device'])
                    continue

                files.sort()

                logging.debug("Files: %s", json.dumps(files, indent=2))

                if not parsed_args.no_combine:
                    # Combind the geoJSON objects
                    combined_geojson_obj = combine_geojson_files(files, cruiseID, GPSSource['device'])

                    # If there was a problem, exit
                    if not combined_geojson_obj:
                        logging.error("Problem combining data files from GPS Source: %s", GPSSource['device'])
                        continue

                    # Save the combined geoJSON object to file
                    if not parsed_args.kml_only:
                        output_filepath = os.path.join(tracklineDir, cruiseID + '_' + GPSSource['device'] + "_Trackline.json")
                        logging.info("Saving file: %s", output_filepath)
                        output_results = output_json_data_to_file(output_filepath, combined_geojson_obj)

                        if not output_results['verdict']:
                            logging.error("Problem writing output file: %s, reason: %s", output_filepath, output_results['reason'])
                        elif not parsed_args.outputDir or parsed_args.username:
                            output_results = set_owner_group_permissions(outputUser, output_filepath)
                            if not output_results['verdict']:
                                logging.error("Problem setting permissions for output file: %s, reason: %s", output_filepath, output_results['reason'])

                    # Convert the combined geoJSON object to kml and save to file
                    if not parsed_args.geojson_only:
                        output_filepath_kml = os.path.join(tracklineDir, cruiseID + '_' + GPSSource['device'] + "_Trackline.kml")
                        logging.info("Saving file: %s", output_filepath_kml)
                        try:
                            with open(output_filepath_kml, mode='w', encoding="utf-8") as kml_file:
                                kml_file.write(convert_to_kml(combined_geojson_obj))
                        except Exception as err:
                            logging.error("Problem writing output file: %s", output_filepath_kml)
                            logging.debug(str(err))

                        if not parsed_args.outputDir or parsed_args.username:
                            output_results = set_owner_group_permissions(outputUser, output_filepath_kml)
                            if not output_results['verdict']:
                                logging.error("Problem setting permissions for output file: %s, reason: %s", output_filepath_kml, output_results['reason'])

                else:

                    for file in files:

                        geojson_obj = None

                        try:
                            with open(file, mode='r', encoding="utf-8") as f:
                                geojson_obj = json.load(f)

                            geojson_obj = geojson_obj['visualizerData'][0]

                        # If the file cannot be processed return false.
                        except OSError:
                            logging.error("Could not open file: %s", file)
                            continue

                        except json.decode.JSONDecodeError:
                            logging.error("Could not proccess file: %s", file)
                            continue

                        if not geojson_obj:
                            logging.error("Problem combining data files from GPS Source: %s", GPSSource['device'])
                            continue

                        # Save the combined geoJSON object to file
                        if not parsed_args.kml_only:
                            output_filepath = os.path.join(tracklineDir, cruiseID + '_' + os.path.basename(file).split('.')[0] + "_Trackline.json")
                            logging.info("Saving file: %s", output_filepath)
                            output_results = output_json_data_to_file(output_filepath, geojson_obj)

                            if not output_results['verdict']:
                                logging.error("Problem writing output file: %s, reason: %s", output_filepath, output_results['reason'])
                            elif not parsed_args.outputDir or parsed_args.username:
                                output_results = set_owner_group_permissions(outputUser, output_filepath)
                                if not output_results['verdict']:
                                    logging.error("Problem setting permissions for output file: %s, reason: %s", output_filepath, output_results['reason'])

                        # Convert the combined geoJSON object to kml and save to file
                        if not parsed_args.geojson_only:
                            output_filepath_kml = os.path.join(tracklineDir, cruiseID + '_' + os.path.basename(file).split('.')[0] + "_Trackline.kml")
                            logging.info("Saving file: %s", output_filepath_kml)
                            try:
                                with open(output_filepath_kml, mode='w', encoding="utf-8") as kml_file:
                                    kml_file.write(convert_to_kml(geojson_obj))
                            except Exception as err:
                                logging.error("Problem writing output file: %s", output_filepath_kml)
                                logging.debug(str(err))

                            if not parsed_args.outputDir or parsed_args.username:
                                output_results = set_owner_group_permissions(outputUser, output_filepath_kml)
                                if not output_results['verdict']:
                                    logging.error("Problem setting permissions for output file: %s, reason: %s", output_filepath_kml, output_results['reason'])

            # No need to proceed to another collectionSystem
            break
