#!/usr/bin/env python3
"""
FILE:  rov_openrvdas_plugin.py

USAGE:  rov_openrvdas_plugin.py [-h] [--dataType] <dataFile>

DESCRIPTION:  This python script interprets raw files created by the OpenRVDAS
    Data Acquision System.  Depending on the command-line arguments, the script
    returns the data type of the file or a sub-sampled and json-formatted
    version of the original file to stdout.  The json-formatted file is
    used by OpenVDM as part of it's Data dashboard.

  OPTIONS:  [-h] Return the help message.
            [--dataType] Return the datatype of the file as defined in the
                fileTypeFilter array.
            <dataFile> Full or relative path of the data file to process.

REQUIREMENTS:  Python3.11
               Python Modules:
                   requests==2.32.3
     BUGS:
    NOTES:
   AUTHOR:  Webb Pinner
  VERSION:  2.11
  CREATED:  2016-10-23
 REVISION:  2025-04-12
"""

import sys
import os
import json
import fnmatch
import argparse
import logging
from datetime import datetime
from os.path import dirname, realpath
import requests

sys.path.append(dirname(dirname(dirname(realpath(__file__)))))

from server.lib.openvdm import OpenVDM
from server.lib.openvdm_plugin import OpenVDMPlugin
from server.plugins.parsers.comp_pres_parser import CompPresParser
from server.plugins.parsers.ctd_parser import CTDParser
from server.plugins.parsers.gga_parser import GGAParser
from server.plugins.parsers.o2_parser import O2Parser
from server.plugins.parsers.paro_parser import ParoParser
from server.plugins.parsers.sprint_parser import SprintParser

SEALOG_SERVER_URL = 'http://localhost:8000/sealog-server'
SEALOG_JWT = '<TOKEN>'

# -------------------------------------------------------------------------------------
# This array defines the various dataTypes collected by SCS and the cooresponding file
# regex expression.
# -------------------------------------------------------------------------------------
FILE_TYPE_FILTERS = [
    {"data_type":"rov-comp-pres", "regex": "*/raw/Mech_Comps_Raw-*.txt",   "parser": "CompPres", 'parser_options':{}},
    {"data_type":"rov-ctd",       "regex": "*/raw/CTD_Raw-*.txt",          "parser": "CTD",      'parser_options':{}},
    {"data_type":"rov-o2",        "regex": "*/raw/O2_Raw-*.txt",           "parser": "O2",       'parser_options':{}},
    {"data_type":"rov-paro",      "regex": "*/raw/Paro_Depth_Raw-*.txt",   "parser": "Paro",     'parser_options':{}},
    {"data_type":"rov-sprint",    "regex": "*/raw/Sprint_Raw-*.txt",       "parser": "Sprint",   'parser_options':{}},
    {"data_type":"rov-usbl-pri",  "regex": "*/raw/USBL_Pri_GGA_Raw-*.txt", "parser": "GGA",      'parser_options':{}},
    {"data_type":"rov-usbl-sec",  "regex": "*/raw/USBL_Sec_GGA_Raw-*.txt", "parser": "GGA",      'parser_options':{}},
]

# -------------------------------------------------------------------------------------
# Function to determine the datatype of the raw datafile.  If the datatype can not be
# determined, the function returns false
# -------------------------------------------------------------------------------------


class ROVOpenRVDASPlugin(OpenVDMPlugin):
    """
    OpenVDM plugin for the SCS Underway data acquisition system
    """

    def __init__(self, lowering=None, use_sealog_api=True):

        self.sealog_server_url = SEALOG_SERVER_URL
        self.sealog_jwt = SEALOG_JWT
        self.ovdm = OpenVDM()
        self.lowering = lowering if lowering is not None else self.ovdm.get_lowering_id()
        self.use_sealog_api = use_sealog_api

        if self.use_sealog_api:
            lowering = self._get_sealog_lowering_by_id(self.lowering)
            try:
                self.start_dt = datetime.strptime(lowering['lowering_additional_meta']['milestones']['lowering_descending'], "%Y-%m-%dT%H:%M:%S.%fZ")  if lowering['lowering_additional_meta']['milestones']['lowering_descending'] else datetime.strptime(lowering.start_ts, "%Y-%m-%dT%H:%M:%S.%fZ")
                self.stop_dt = datetime.strptime(lowering['lowering_additional_meta']['milestones']['lowering_floats_on_surface'], "%Y-%m-%dT%H:%M:%S.%fZ")  if lowering['lowering_additional_meta']['milestones']['lowering_floats_on_surface'] else datetime.strptime(lowering.stop_ts, "%Y-%m-%dT%H:%M:%S.%fZ")
            except Exception as err:
                logging.warning("Could not determine lowering start/stop datetime")
                logging.debug(str(err))
                self.start_dt = None
                self.stop_dt = None

        else:
            try:
                self.start_dt = datetime.strptime(self.ovdm.get_lowering_start_date(), "%Y-%m-%dT%H:%M:%S.%fZ")
            except Exception as err:
                self.start_dt = None
                logging.debug(str(err))

            try:
                self.stop_dt = datetime.strptime(self.ovdm.get_lowering_end_date(), "%Y-%m-%dT%H:%M:%S.%fZ")
            except Exception as err:
                self.stop_dt = None
                logging.debug(str(err))

        super().__init__(FILE_TYPE_FILTERS)


    def get_parser(self, filepath): # pylint: disable=too-many-return-statements
        """
        Function to determine the parser to use with the raw datafile.  If the
        datatype can not be determined, the function returns false
        """

        file_type_filter = list(filter(lambda file_type_filter: fnmatch.fnmatch(filepath, file_type_filter['regex']), self.file_type_filters))

        if len(file_type_filter) == 0:
            return None

        file_type_filter = file_type_filter[0]

        if file_type_filter['parser'] == "CompPres":
            return CompPresParser(**file_type_filter['parser_options'])

        if file_type_filter['parser'] == "CTD":
            return CTDParser(**file_type_filter['parser_options'])

        if file_type_filter['parser'] == "GGA":
            return GGAParser(**file_type_filter['parser_options'])

        if file_type_filter['parser'] == "O2":
            return O2Parser(**file_type_filter['parser_options'])

        if file_type_filter['parser'] == "Paro":
            return ParoParser(**file_type_filter['parser_options'])

        if file_type_filter['parser'] == "Sprint":
            return SprintParser(**file_type_filter['parser_options'])

        return None


    def _get_sealog_lowering_by_id(self, lowering_id):
        """
        Retrieve the OpenVDM lowering configuration based in the lowering id
        """

        try:
            url = f"{self.sealog_server_url}/api/v1/lowerings?lowering_id={lowering_id}"
            req = requests.get(url, headers={"authorization": self.sealog_jwt}, timeout=5)
            lowering = json.loads(req.text)[0]
            return lowering
        except Exception as err:
            logging.warning("Lowering %s not found in Sealog", lowering_id)
            logging.debug(str(err))

        return None

# -------------------------------------------------------------------------------------
# Required python code for running the script as a stand-alone utility
# -------------------------------------------------------------------------------------
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='OpenVDM plugin for ROV_OpenRVDAS')
    parser.add_argument('--dataType', action='store_true',
                        help='return the dataType of the file')
    parser.add_argument('-v', '--verbosity', dest='verbosity',
                        default=0, action='count',
                        help='Increase output verbosity')
    parser.add_argument('--lowering', dest='lowering',
                        default=None, help='lowering to use with the datafile')
    parser.add_argument('dataFile', metavar='dataFile',
                        help='the raw data file to process')

    parsed_args = parser.parse_args()

    ############################
    # Set up logging before we do any other argument parsing (so that we
    # can log problems with argument parsing).

    LOGGING_FORMAT = '%(asctime)-15s %(levelname)s - %(message)s'
    logging.basicConfig(format=LOGGING_FORMAT)

    LOG_LEVELS = {0: logging.WARNING, 1: logging.INFO, 2: logging.DEBUG}
    parsed_args.verbosity = min(parsed_args.verbosity, max(LOG_LEVELS))
    logging.getLogger().setLevel(LOG_LEVELS[parsed_args.verbosity])

    if not os.path.isfile(parsed_args.dataFile):
        logging.error("File not found")
        sys.exit(1)
    elif os.stat(parsed_args.dataFile).st_size == 0:
        logging.warning("File is empty")
        sys.exit(0)

    plugin = ROVOpenRVDASPlugin(lowering=parsed_args.lowering)

    if parsed_args.dataType:
        dataType = plugin.get_data_type(parsed_args.dataFile)
        if dataType is None:
            logging.warning("File is of unknown type")
            sys.exit(1)
        print(dataType)
    else:
        jsonSTR = plugin.get_json_str(parsed_args.dataFile)
        if jsonSTR is None:
            logging.warning("Nothing returned from parser")
            sys.exit(1)
        print(jsonSTR)
