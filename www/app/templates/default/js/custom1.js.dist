$(function () {
    'use strict';
    
    var MAPPROXY_DIR = '/mapproxy';
    
    var mapObjects = [];

    function updateBounds(mapObject) {
        if (mapObject['map']) {
            // Center the map based on the bounds
            var mapBoundsArray = [];
            for (var item in mapObject['mapBounds'] ){
                mapBoundsArray.push( mapObject['mapBounds'][ item ] );
            }
            
            if (mapBoundsArray.length > 0) {
                mapObject['map'].fitBounds(mapBoundsArray);
            }
        }
    }

    function initMapObject(placeholderID, objectListID) {
        
        var mapObject = [];
        
        //Build mapObject object
        mapObject['placeholderID'] = placeholderID;
        mapObject['objectListID'] = objectListID;
        mapObject['markers'] = [];
        mapObject['geoJSONLayers'] = [];
        mapObject['tmsLayers'] = [];
        mapObject['mapBounds'] = [];
        mapObject['attribution'] = [];

        //Build the map
        mapObject['map'] = L.map(mapObject['placeholderID'], {
            //maxZoom: 13,
            fullscreenControl: true,
        }).setView(L.latLng(0, 0), 2);

        var openStreetMap = L.tileLayer('http://basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}@2x.png', {
            attribution: '&copy <a href="http://www.openstreetmap.org/copyright", target="_blank", rel="noopener">OpenStreetMap</a>, contributors &copy; <a href="https://carto.com/about-carto/">rastertiles/voyager</a>',
            maxZoom: 20
        }),
        gmrtBase = L.tileLayer.wms('https://www.gmrt.org/services/mapserver/wms_merc?', {
            layers: 'topo',
            format: 'image/png',
            attribution: '<a href="http://www.marine-geo.org/portals/gmrt/" target="_blank">GMRT</a>'
        });

        worldOceanBase.addTo(mapObject['map']);
        worldOceanBase.bringToBack();
        worldOceanReference.addTo(mapObject['map']);
        
        var baseLayers = {
            "OpenStreetMap" : openStreetMap,
            "GMRT Base" : gmrtBase
        };

        L.control.layers(baseLayers, overlays).addTo(mapObject['map']);

        L.easyPrint({
            title: 'Export current map view',
            tileLayer: baseLayers,
            position: 'topright',
            hideControlContainer: true,
            exportOnly: true,
            filename: 'openvdm_map_export'
            // sizeModes: ['A4Portrait', 'A4Landscape']
        }).addTo(mapObject['map']);

        mapObject['map'].on('fullscreenchange', function () {
        updateBounds(mapObject);
        });

        return mapObject;
    }

    function mapChecked(mapObject) {
        $( '#' + mapObject['objectListID']).find(':checkbox:checked').each(function() {
            if ($(this).hasClass("lp-checkbox")) {
                addLatestPositionToMap(mapObject, $(this).val());
            } else if ($(this).hasClass("geoJSON-checkbox")) {
                //alert($(this).val());
                addGeoJSONToMap(mapObject, $(this).val());
            } else if ($(this).hasClass("tms-checkbox")) {
                //alert($(this).val());
                addTMSToMap(mapObject, $(this).val());
            }
        });        
    }
    
    function addLatestPositionLabelToMap(mapObject, dataType) {
        var getVisualizerDataURL = siteRoot + 'api/dashboardData/getLatestVisualizerDataByType/' + cruiseID + '/' + dataType;
        $.getJSON(getVisualizerDataURL, function (data, status) {
            if (status === 'success' && data !== null) {

                if ('error' in data) {
                    $('#' + mapObject['placeholderID']).html('<strong>Error: ' + data.error + '</strong>');
                } else {
                    //Get the last coordinate from the latest trackline
                    // console.log(getVisualizerDataURL);
                    // console.log(data);
                    var lastCoordinate = data[0].features[0].geometry.coordinates[data[0].features[0].geometry.coordinates.length - 1];

                    L.Control.LastPosition = L.Control.extend({
                        options: {
                            position: 'bottomleft'
                        },

                        initialize: function (options /*{ data: {...}  }*/) {
                            // constructor
                            L.Util.setOptions(this, options);
                        },
                        onAdd: function (map) {
                            // happens after added to map
                            var container = L.DomUtil.create('div', 'latest_position');
                            L.DomUtil.addClass(container,'latest_position');
                            //L.DomUtil.addClass(container,'leaflet-control-attribution');

                            container.innerHTML = 'Lat: ' + lastCoordinate[1] + ' Lon: ' + lastCoordinate[0];
                            return container;
                        },
                        onRemove: function (map) {
                            // happens after removed from map
                            var elem = document.getElementById("lastest_position");
                            elem.remove();
                        },
                    });

                    L.control.lastPos = function(id, options) {
                        return new L.Control.LastPosition(id, options);
                    }

                    mapObject['map'].addControl(L.control.lastPos());
                }
            }
        });
    }


    function addLatestPositionToMap(mapObject, dataType) {
        var getVisualizerDataURL = siteRoot + 'api/dashboardData/getLatestVisualizerDataByType/' + cruiseID + '/' + dataType;
        $.getJSON(getVisualizerDataURL, function (data, status) {
            if (status === 'success' && data !== null) {

                if ('error' in data) {
                    $('#' + mapObject['placeholderID']).html('<strong>Error: ' + data.error + '</strong>');
                } else {
                    //Get the last coordinate from the latest trackline
                    var lastCoordinate = data[0].features[0].geometry.coordinates[data[0].features[0].geometry.coordinates.length - 1];
                    var latestPosition = L.latLng(lastCoordinate[1], lastCoordinate[0]);

                    if (lastCoordinate[0] < 0) {
                        latestPosition = latestPosition.wrap(360, 0);
                    } else {
                        latestPosition = latestPosition.wrap();
                    }

                    var bounds = new L.LatLngBounds([latestPosition]);
                    mapObject['mapBounds']['LatestPosition-' + dataType] = bounds;

                    // Add marker at the last coordinate
                    mapObject['markers']['LatestPosition-' + dataType] = L.marker(latestPosition);
                    mapObject['markers']['LatestPosition-' + dataType].addTo(mapObject['map']);

                    updateBounds(mapObject);
                }
            }
        });
    }


    function removeLatestPositionFromMap(mapObject, dataType) {
        mapObject['map'].removeLayer(mapObject['markers']['LatestPosition-' + dataType]);

        //remove the bounds and re-center/re-zoom the map
        delete mapObject['markers']['LatestPosition-' + dataType];

        updateBounds(mapObject);
    }

    function addGeoJSONToMap(mapObject, dataObjectJsonName) {
        var getVisualizerDataURL = siteRoot + 'api/dashboardData/getDashboardObjectVisualizerDataByJsonName/' + cruiseID + '/' + dataObjectJsonName;
        $.getJSON(getVisualizerDataURL, function (data, status) {
            if (status === 'success' && data !== null) {

                var placeholder = '#' + mapObject['placeholderID'];
                if ('error' in data) {
                    $(placeholder).html('<strong>Error: ' + data.error + '</strong>');
                } else {
                    // Build the layer
                    mapObject['geoJSONLayers'][dataObjectJsonName] = L.geoJson(data[0], { style: { weight: 3 },
                        coordsToLatLng: function (coords) {
                            var longitude = coords[0],
                                latitude = coords[1];

                            var latlng = L.latLng(latitude, longitude);

                            if (longitude < 0) {
                                return latlng.wrap(360, 0);
                            } else {
                                return latlng.wrap();
                            }
                        }
                    });

                    // Calculate the bounds of the layer
                    mapObject['mapBounds'][dataObjectJsonName] = mapObject['geoJSONLayers'][dataObjectJsonName].getBounds();

                    // Add the layer to the map
                    mapObject['geoJSONLayers'][dataObjectJsonName].addTo(mapObject['map']);

                    updateBounds(mapObject);
                }
            }
        });
    }
    
    function removeGeoJSONFromMap(mapObject, dataObjectJsonName) {
        mapObject['map'].removeLayer(mapObject['geoJSONLayers'][dataObjectJsonName]);
        delete mapObject['geoJSONLayers'][dataObjectJsonName];
            
        //remove the bounds and re-center/re-zoom the map
        delete mapObject['mapBounds'][dataObjectJsonName];
        
        updateBounds(mapObject);
    }
    
    function addTMSToMap(mapObject, tmsObjectJsonName) {
        var getDataObjectFileURL = siteRoot + 'api/dashboardData/getDashboardObjectVisualizerDataByJsonName/' + cruiseID + '/' + tmsObjectJsonName;
        $.getJSON(getDataObjectFileURL, function (data, status) {
            if (status === 'success' && data !== null) {
                
                var placeholder = '#' + mapObject['placeholderID'];
                if ('error' in data){
                    $(placeholder).html('<strong>Error: ' + data.error + '</strong>');
                } else {
                        
                    // Calculate the bounds of the layer
                    var coords = data[0]['mapBounds'].split(','),
                        southwest = L.latLng(parseFloat(coords[1]), parseFloat(coords[0])),
                        northeast = L.latLng(parseFloat(coords[3]), parseFloat(coords[2]));

                    // Build the layer
                    mapObject['tmsLayers'][tmsObjectJsonName] = L.tileLayer(location.protocol + '//' + location.host + cruiseDataDir + '/' + data[0]['tileDirectory'] + '/{z}/{x}/{y}.png', {
                        tms:true,
                        bounds:L.latLngBounds(southwest, northeast),
                        zIndex: 10
                    });
                    
                    if (parseFloat(coords[0]) < 0) {
                        southwest = southwest.wrap(360, 0);
                    } else {
                        southwest = southwest.wrap();
                    }
                    
                    if (parseFloat(coords[2]) < 0) {
                        northeast = northeast.wrap(360, 0);
                    } else {
                        northeast = northeast.wrap();
                    }
                    
                    mapObject['mapBounds'][tmsObjectJsonName] = L.latLngBounds(southwest, northeast);
                    //console.log(mapObject['mapBounds'][tmsObjectJsonName]);
                        
                    // Add the layer to the map
                    mapObject['tmsLayers'][tmsObjectJsonName].addTo(mapObject['map']);

                    updateBounds(mapObject);
                }
            }
        });
    }
    
    function removeTMSFromMap(mapObject, tmsObjectJsonName) {
        //remove the layer
        mapObject['map'].removeLayer(mapObject['tmsLayers'][tmsObjectJsonName]);
        delete mapObject['tmsLayers'][tmsObjectJsonName];
            
        //remove the bounds and re-center/re-zoom the map
        delete mapObject['mapBounds'][tmsObjectJsonName];
        
        updateBounds(mapObject);
    }

    //Initialize the mapObjects
    $( '.map' ).each(function( index ) {
        var mapPlaceholderID = $( this ).attr('id');
        var tempArray = mapPlaceholderID.split("_");
        tempArray.pop();
        var objectListPlaceholderID =  tempArray.join('_') + '_objectList-placeholder';
        //alert(objectListPlaceholderID);
        mapObjects.push(initMapObject(mapPlaceholderID, objectListPlaceholderID));
    });
    
    //build the maps
    for(var i = 0; i < mapObjects.length; i++) {
        mapChecked(mapObjects[i]);
        setTimeout(updateBounds(mapObjects[i]), 5000);
        addLatestPositionLabelToMap(mapObjects[i], 'gga-cnav');
    }
    
    //Check for updates
    $.each(mapObjects, function(i) {
        $( '#' + mapObjects[i]['objectListID']).find(':checkbox:checked').change(function() {
            if ($(this).is(":checked")) {
                if ($(this).hasClass("lp-checkbox")) {
                    //alert($(this).val());
                    addLatestPositionToMap(mapObjects[i], $(this).val());
                } else if ($(this).hasClass("geoJSON-checkbox")) {
                    //alert($(this).val());
                    addGeoJSONToMap(mapObjects[i], $(this).val());
                } else if ($(this).hasClass("tms-checkbox")) {
                    //alert($(this).val());
                    addTMSToMap(mapObjects[i], $(this).val());
                }
            } else {
                if ($(this).hasClass("lp-checkbox")) {
                    //alert($(this).val());
                    removeLatestPositionFromMap(mapObjects[i], $(this).val());
                } else if ($(this).hasClass("geoJSON-checkbox")) {
                    //alert($(this).val());
                    removeGeoJSONFromMap(mapObjects[i], $(this).val());
                } else if ($(this).hasClass("tms-checkbox")) {
                    //alert($(this).val());
                    removeTMSFromMap(mapObjects[i], $(this).val());
                }
            }
        });
    });
    
});
